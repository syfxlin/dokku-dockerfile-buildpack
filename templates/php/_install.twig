{# Define version #}
ENV PHP_VERSION {{ php.version | default(__conf.php.version) }}
ENV PHP_INI_DIR /usr/local/etc/php
ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev dpkg \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkgconf \
		re2c
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -pie"

{# Install php #}
{# Add runtime packages #}
RUN apk add --no-cache \
		ca-certificates \
		tar \
		xz \
		openssl

{# Add user and group #}
RUN adduser -u 82 -D -S -G www-data www-data

{# Prepare php build, download source #}
RUN mkdir -p "$PHP_INI_DIR/conf.d"
RUN mkdir -p /usr/src \
    && cd /usr/src \
    && wget "https://www.php.net/distributions/php-$PHP_VERSION.tar.xz" -O php.tar.xz

{# Copy build script #}
COPY {{ copy('php/docker-php-source') }} /usr/local/bin/docker-php-source

{# Build #}
{# Add build packages #}
RUN apk add --no-cache --virtual .build-deps \
            $PHPIZE_DEPS \
            argon2-dev \
            coreutils \
            curl-dev \
            libsodium-dev \
            libxml2-dev \
            linux-headers \
            oniguruma-dev \
            openssl-dev \
            readline-dev \
            sqlite-dev \
    && export CFLAGS="$PHP_CFLAGS" CPPFLAGS="$PHP_CPPFLAGS" LDFLAGS="$PHP_LDFLAGS" \
    {# Extract source code #}
    && docker-php-source extract \
    && cd /usr/src/php \
    && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
    {# Build #}
    && ./configure \
		    --build="$gnuArch" \
		    --with-config-file-path="$PHP_INI_DIR" \
		    --with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		    --enable-option-checking=fatal \
		    --with-mhash \
		    --with-pic \
		    --enable-ftp \
		    --enable-mbstring \
		    --enable-mysqlnd \
		    --with-password-argon2 \
		    --with-sodium=shared \
		    --with-pdo-sqlite=/usr \
		    --with-sqlite3=/usr \
		    --with-curl \
		    --with-openssl \
		    --with-readline \
		    --with-zlib \
		    --with-pear \
		    $(test "$gnuArch" = 's390x-linux-musl' && echo '--without-pcre-jit') \
        --enable-fpm \
        --with-fpm-user=www-data \
        --with-fpm-group=www-data \
        --disable-cgi \
		    {{ php.configure_args | default('') }} \
    && make -j "$(nproc)" \
    && find -type f -name '*.a' -delete \
    && make install \
    && find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true \
    && make clean \
    && cp -v php.ini-* "$PHP_INI_DIR/" \
    {# Clear #}
    && cd / \
    && docker-php-source delete \
    {# Add runtime packages #}
    && runDeps="$( \
        scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
          | tr ',' '\n' \
          | sort -u \
          | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
      )" \
    && apk add --no-cache $runDeps \
    && apk del --no-network .build-deps \
    {# Update pecl #}
    && pecl update-channels \
    && rm -rf /tmp/pear ~/.pearrc \
    {# Test #}
    && php --version

{# Config php #}
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

{# Copy file #}
COPY {{ copy('php/entrypoint-php.sh') }} /
COPY {{ copy('php/docker-php-ext-configure') }} /usr/local/bin/
COPY {{ copy('php/docker-php-ext-enable') }} /usr/local/bin/
COPY {{ copy('php/docker-php-ext-install') }} /usr/local/bin/
COPY --from=mlocati/php-extension-installer /usr/bin/install-php-extensions /usr/local/bin/

{# Enable extension #}
RUN docker-php-ext-enable sodium
RUN install-php-extensions @composer{{ php.composer_version ? '-' + php.composer_version : '' }} {{ php.extensions | join(' ') }}
